{"version":3,"sources":["images/face.png","images/modelo.png","components/pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","faceRef","useRef","scaleRef","beerRef","useEffect","donateButton","document","querySelector","appendChild","TweenMax","fromTo","current","transform","rotation","to","delay","opacity","top","TimelineLite","repeat","id","className","ref","src","face","alt","beer","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iMAAe,MAA0B,iCCA1B,MAA0B,mCCwG1BA,EAnGF,WAoBX,IAAMC,EAAUC,mBACVC,EAAWD,mBACXE,EAAUF,mBAyChB,OA3BAG,qBAAU,WACR,IAAMC,EAAeC,SAASC,cAAc,sBAC5CD,SAASC,cAAc,4BAA4BC,YAAYH,GAE/DI,IAASC,OAAOR,EAASS,QAAS,EAAG,CACnCC,UAAW,cACV,CACDA,UAAW,WACXC,SAAU,SAEZJ,IAASK,GAAGX,EAAQQ,QAAS,EAAG,CAC9BI,MAAO,IACPC,QAAS,EACTC,IAAK,WAEPR,IAASK,GAAGT,EAAc,EAAG,CAC3BU,MAAO,IACPC,QAAS,IAEA,IAAIE,IAAa,CAACC,OAAQ,GAAIJ,MAAO,IAE7CD,GAAGX,EAAQQ,QAAS,KAAM,CAAEC,UAAW,mBACvCE,GAAGX,EAAQQ,QAAS,KAAM,CAAEC,UAAW,kBACvCE,GAAGX,EAAQQ,QAAS,KAAM,CAAEC,UAAW,mBACzC,IAID,0BAAMQ,GAAG,QACP,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,GAAGC,IAAKpB,GACrB,yBACEmB,UAAU,OACVC,IAAKtB,EACLuB,IAAKC,EACLC,IAAI,SAGN,yBACEJ,UAAU,OACVC,IAAKnB,EACLoB,IAAKG,IAEP,yBAAKL,UAAU,gCCvEVM,EATH,WAEV,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCIcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAAS6B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8547f142.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/face.cf9e0e36.png\";","export default __webpack_public_path__ + \"static/media/modelo.66d7c6db.png\";","import React, { useRef, useEffect } from 'react';\nimport { TweenMax, TimelineLite } from 'gsap';\nimport face from '../../images/face.png';\nimport beer from '../../images/modelo.png';\n\nconst Home = () => {\n  // let script = document.createElement('script')\n  // script.setAttribute('data-name', 'bmc-button')\n  // script.src = 'https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js'\n  // script.setAttribute('data-slug', 'marscode')\n  // script.setAttribute('data-color', '#FFDD00')\n  // script.setAttribute('data-emoji', '🍺')\n  // script.setAttribute('data-font', 'Inter')\n  // script.setAttribute('data-text', 'Buy me a beer')\n  // script.setAttribute('data-outline-color', '#000000')\n  // script.setAttribute('data-font-color', '#000000')\n  // script.setAttribute('data-coffee-color', '#ffffff')\n  // script.async = true\n  // script.onload=function(){\n  //   var evt = document.createEvent('Event');  \n  //   evt.initEvent('DOMContentLoaded', false, false);  \n  //   window.dispatchEvent(evt);\n  // }\n\n\n  const faceRef = useRef();\n  const scaleRef = useRef();\n  const beerRef = useRef();\n\n  const animateFaceToNav = () => {\n    document.querySelector('.logo-container').classList.add('shrink-face')\n    document.querySelector('.logo').classList.add('stop-spin')\n    // document.querySelector('.center').classList.remove('center')\n  }\n\n  const toggleSpin = () => {\n    document.querySelector('.logo').classList.contains('stop-spin') ? \n      document.querySelector('.logo').classList.remove('stop-spin') :\n      document.querySelector('.logo').classList.add('stop-spin')\n  }\n\n  useEffect(()=> {\n    const donateButton = document.querySelector('.bmc-btn-container');\n    document.querySelector('.donate-button-container').appendChild(donateButton)\n\n    TweenMax.fromTo(scaleRef.current, 1, {\n      transform: \"scale(0.1)\"\n    }, {\n      transform: \"scale(1)\",\n      rotation: \"1080\"\n    })\n    TweenMax.to(beerRef.current, 1, {\n      delay: 1.8,\n      opacity: 1,\n      top: \"-145px\"\n    })\n    TweenMax.to(donateButton, 1, {\n      delay: 4.5,\n      opacity: 1\n    })\n    const tl = new TimelineLite({repeat: 10, delay: 3})\n    tl\n      .to(beerRef.current, .035, { transform: \"rotate(-15deg)\" })\n      .to(beerRef.current, .035, { transform: \"rotate(15deg)\" })\n      .to(beerRef.current, .035, { transform: \"rotate(0deg)\" })\n  }, [])\n\n\n  return (\n    <main id=\"home\">\n      <div className=\"logo-container\">\n        <div className=\"\" ref={scaleRef}>\n          <img \n            className=\"logo\" \n            ref={faceRef}\n            src={face} \n            alt=\"logo\" \n            // onClick={toggleSpin}\n          />\n          <img\n            className=\"beer\"\n            ref={beerRef}\n            src={beer}\n          />\n          <div className=\"donate-button-container\"></div>\n          {/*<span id=\"text\"></span>*/}\n        </div>\n      </div>\n      {/*<div className=\"link-container\">\n        <p className=\"link\" onClick={animateFaceToNav}>play</p>\n        <span> | </span>\n        <a\n          className=\"link\"\n          href=\"mailto:marianoe1989@gmail.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          email\n        </a>\n      </div>*/}\n    </main>\n  )\n}\n\nexport default Home;","import React from 'react';\nimport Home from './components/pages/Home';\nimport './styles/css/main.css';\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  ); \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/css/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}